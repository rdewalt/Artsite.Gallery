name: 'Terraform'

env:
    AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    AWS_REGION: "us-west-2"

on:
  push:
    branches: [ "dev" ,"terratest"]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.6

    # Create rwd-yna.pem file
    - name: Create PEM file
      run: echo "${{ secrets.SSH_KEY }}" | tr -d '\r' > rwd-yna.pem

    # Create yna-int file
    - name: Create yna-int secret file
      run: echo "${{ secrets.RSA_FILE }}" | tr -d '\r' > files/yna-int
      
    # Create rwd-yna.pem file
    - name: Create yna-int.pub secret file
      run: echo "${{ secrets.RSA_PUB_FILE }}" | tr -d '\r' > files/yna-int.pub

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Validate
      run: terraform validate -no-color

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false
